package org.zx;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

public class VFTPServer implements Runnable{
    private final Socket client;
    private static final ArrayList<String> LOCK = new ArrayList<>();

    public VFTPServer(Socket socket){
        this.client = socket;
    }
    @Override
    public void run() {
        try {
            PrintStream out = new PrintStream(this.client.getOutputStream());
            Scanner in = new Scanner(this.client.getInputStream());
            String cmd = in.nextLine();
            String _c,_f;
            _c = cmd.split(" ")[0];
            _f = cmd.split(" ")[1];
            if("stop".equals(_c)){
                out.close();
                in.close();
                client.close();
            }else if("download".equals(_c)){
                File f = new File(_f);
                if (!f.exists()) {
                    out.print(-2);
                }else{
                    FileInputStream fin = new FileInputStream(f);
                    int temp = fin.read();
                    while (temp != -1){
                        out.write(temp);
                        temp = fin.read();
                    }
                    out.write(-1);
                    fin.close();
                }
            } else if ("upload".equals(_c)) {
                synchronized (this){
                    if(LOCK.indexOf(_c)>0){
                        out.print(-2);
                    }else{
                        LOCK.add(_f);
                        File f = new File(_c);
                        if(!f.exists()){
                            out.print(-3);
                        }else{
                            out.println(-4);
                            FileOutputStream fout = new FileOutputStream(f);
                            byte temp = in.nextByte();
                            while (temp != -1){
                                fout.write(temp);
                                temp = in.nextByte();
                            }
                            fout.close();
                        }
                        LOCK.remove(_f);
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
